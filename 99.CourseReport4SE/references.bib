@article{10.1145/2379776.2379787,
author = {Harman, Mark and Mansouri, S. Afshin and Zhang, Yuanyuan},
title = {Search-Based Software Engineering: Trends, Techniques and Applications},
year = {2012},
issue_date = {November 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {45},
number = {1},
issn = {0360-0300},
url = {https://doi.org/10.1145/2379776.2379787},
doi = {10.1145/2379776.2379787},
journal = {ACM Comput. Surv.},
month = dec,
articleno = {11},
numpages = {61},
keywords = {search-based techniques, Software engineering, survey}
}
  
@INPROCEEDINGS{7102580,  
author={M. {Harman} and Y. {Jia} and Y. {Zhang}},  
booktitle={2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)},   
title={Achievements, Open Problems and Challenges for Search Based Software Testing},   
year={2015},  
volume={},  
number={},  
pages={1-12}
}

@article{AFZAL2009957,
title = "A systematic review of search-based testing for non-functional system properties",
journal = "Information and Software Technology",
volume = "51",
number = "6",
pages = "957 - 976",
year = "2009",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2008.12.005",
url = "http://www.sciencedirect.com/science/article/pii/S0950584908001833",
author = "Wasif Afzal and Richard Torkar and Robert Feldt",
keywords = "Systematic review, Non-functional system properties, Search-based software testing",
abstract = "Search-based software testing is the application of metaheuristic search techniques to generate software tests. The test adequacy criterion is transformed into a fitness function and a set of solutions in the search space are evaluated with respect to the fitness function using a metaheuristic search technique. The application of metaheuristic search techniques for testing is promising due to the fact that exhaustive testing is infeasible considering the size and complexity of software under test. Search-based software testing has been applied across the spectrum of test case design methods; this includes white-box (structural), black-box (functional) and grey-box (combination of structural and functional) testing. In addition, metaheuristic search techniques have also been applied to test non-functional properties. The overall objective of undertaking this systematic review is to examine existing work into non-functional search-based software testing (NFSBST). We are interested in types of non-functional testing targeted using metaheuristic search techniques, different fitness functions used in different types of search-based non-functional testing and challenges in the application of these techniques. The systematic review is based on a comprehensive set of 35 articles obtained after a multi-stage selection process and have been published in the time span 1996–2007. The results of the review show that metaheuristic search techniques have been applied for non-functional testing of execution time, quality of service, security, usability and safety. A variety of metaheuristic search techniques are found to be applicable for non-functional testing including simulated annealing, tabu search, genetic algorithms, ant colony methods, grammatical evolution, genetic programming (and its variants including linear genetic programming) and swarm intelligence methods. The review reports on different fitness functions used to guide the search for each of the categories of execution time, safety, usability, quality of service and security; along with a discussion of possible challenges in the application of metaheuristic search techniques."
}

@article{doi:10.1002/stvr.294,
author = {McMinn, Phil},
title = {Search-based software test data generation: a survey},
journal = {Software Testing, Verification and Reliability},
volume = {14},
number = {2},
pages = {105-156},
keywords = {search-based software engineering, automated software test data generation, evolutionary testing, metaheuristic search, evolutionary algorithms, simulated annealing},
doi = {10.1002/stvr.294},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/stvr.294},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/stvr.294},
abstract = {Abstract The use of metaheuristic search techniques for the automatic generation of test data has been a burgeoning interest for many researchers in recent years. Previous attempts to automate the test generation process have been limited, having been constrained by the size and complexity of software, and the basic fact that, in general, test data generation is an undecidable problem. Metaheuristic search techniques offer much promise in regard to these problems. Metaheuristic search techniques are high-level frameworks, which utilize heuristics to seek solutions for combinatorial problems at a reasonable computational cost. To date, metaheuristic search techniques have been applied to automate test data generation for structural and functional testing; the testing of grey-box properties, for example safety constraints; and also non-functional properties, such as worst-case execution time. This paper surveys some of the work undertaken in this field, discussing possible new future directions of research for each of its different individual areas. Copyright © 2004 John Wiley \& Sons, Ltd.},
year = {2004}
}

@article{Mark2010Search,
  title={Search Based Software Engineering: Techniques, Taxonomy, Tutorial},
  author={Mark Harman and Phil McMinn and Jerffeson Teixeira de Souza and Shin Yoo},
  year={2010},
}

@article{5210118,  
author={S. {Ali} and L. C. {Briand} and H. {Hemmati} and R. K. {Panesar-Walawege}},  
journal={IEEE Transactions on Software Engineering},   
title={A Systematic Review of the Application and Empirical Investigation of Search-Based Test Case Generation},   
year={2010},  
volume={36},  
number={6},  
pages={742-762},
}

@article{5210119,
  author          = {Mark Harman, Afshin Mansouri and Yuanyuan Zhang},
  title           = {Search based software engineering: A comprehensive analysis and review of trends techniques and applications.},
  journal         = {Technical},
  volume          = {},
  number          = {pp. 09-03},
  year            = {April 2009}
}

@article{doi:10.1002/stvr.430,
author = {Yoo, S. and Harman, M.},
title = {Regression testing minimization, selection and prioritization: a survey},
journal = {Software Testing, Verification and Reliability},
volume = {22},
number = {2},
pages = {67-120},
keywords = {regression testing, test suite minimization, regression test selection, test case prioritization},
doi = {10.1002/stvr.430},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/stvr.430},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/stvr.430},
abstract = {SUMMARYRegression testing is a testing activity that is performed to provide confidence that changes do not harm the existing behaviour of the software. Test suites tend to grow in size as software evolves, often making it too costly to execute entire test suites. A number of different approaches have been studied to maximize the value of the accrued test suite: minimization, selection and prioritization. Test suite minimization seeks to eliminate redundant test cases in order to reduce the number of tests to run. Test case selection seeks to identify the test cases that are relevant to some set of recent changes. Test case prioritization seeks to order test cases in such a way that early fault detection is maximized. This paper surveys each area of minimization, selection and prioritization technique and discusses open problems and potential directions for future research. Copyright © 2010 John Wiley \& Sons, Ltd.},
year = {2012}
}

@INPROCEEDINGS{5601835,  
author={M. {Harman}},  
booktitle={2010 10th IEEE Working Conference on Source Code Analysis and Manipulation},   
title={Why Source Code Analysis and Manipulation Will Always be Important},   
year={2010},  
volume={},  
number={},  
pages={7-19},
}

@article{10.1145/390016.808445,
author = {Boyer, Robert S. and Elspas, Bernard and Levitt, Karl N.},
title = {SELECT—a Formal System for Testing and Debugging Programs by Symbolic Execution},
year = {1975},
issue_date = {June 1975},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/390016.808445},
doi = {10.1145/390016.808445},
journal = {SIGPLAN Not.},
month = apr,
pages = {234–245},
numpages = {12},
keywords = {Program verification, Symbolic execution, Program debugging, Program testing, Solution of systems of inequalities, Test data generation}
}
  
@inproceedings{10.1145/800027.808445,
author = {Boyer, Robert S. and Elspas, Bernard and Levitt, Karl N.},
title = {SELECT—a Formal System for Testing and Debugging Programs by Symbolic Execution},
year = {1975},
isbn = {9781450373852},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800027.808445},
doi = {10.1145/800027.808445},
booktitle = {Proceedings of the International Conference on Reliable Software},
pages = {234–245},
numpages = {12},
keywords = {Symbolic execution, Program verification, Program debugging, Solution of systems of inequalities, Test data generation, Program testing},
location = {Los Angeles, California}
}

@INPROCEEDINGS{6100119,  
author={A. {Baars} and M. {Harman} and Y. {Hassoun} and K. {Lakhotia} and P. {McMinn} and P. {Tonella} and T. {Vos}},  
booktitle={2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)},   
title={Symbolic search-based testing},   
year={2011},  volume={},  number={},  
pages={53-62},
}

@inproceedings{10.1145/1321631.1321700,
author = {Inkumsah, Kobi and Xie, Tao},
title = {Evacon: A Framework for Integrating Evolutionary and Concolic Testing for Object-Oriented Programs},
year = {2007},
isbn = {9781595938824},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1321631.1321700},
doi = {10.1145/1321631.1321700},
booktitle = {Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering},
pages = {425–428},
numpages = {4},
keywords = {structural coverage, test generation},
location = {Atlanta, Georgia, USA},
series = {ASE ’07}
}
  

  






@article{SILVA201719,
title = "A systematic review on search based mutation testing",
journal = "Information and Software Technology",
volume = "81",
pages = "19 - 35",
year = "2017",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2016.01.017",
url = "http://www.sciencedirect.com/science/article/pii/S0950584916300167",
author = "Rodolfo Adamshuk Silva and Simone do Rocio [Senger de Souza] and Paulo Sérgio [Lopes de Souza]",
keywords = "Mutation testing, Search based software testing, Meta-heuristic",
abstract = "Context
Search Based Software Testing refers to the use of meta-heuristics for the optimization of a task in the context of software testing. Meta-heuristics can solve complex problems in which an optimum solution must be found among a large amount of possibilities. The use of meta-heuristics in testing activities is promising because of the high number of inputs that should be tested. Previous studies on search based software testing have focused on the application of meta-heuristics for the optimization of structural and functional criteria. Recently, some researchers have proposed the use of SBST for mutation testing and explored solutions for the cost of application of this testing criterion.
Objective
The objective is to identify how SBST has been explored in the context of mutation testing, how fitness functions are defined and the challenges and research opportunities in the application of meta-heuristic search techniques.
Method
A systematic review involving 263 papers published between 1996 and 2014 examined the studies on the use of meta-heuristic search techniques for the optimization of mutation testing.
Results
The results show meta-heuristic search techniques have been applied for the optimization of test data generation, mutant generation and selection of effective mutation operators. Five meta-heuristic techniques, namely Genetic Algorithm, Ant Colony, Bacteriological Algorithm, Hill Climbing and Simulated Annealing have been used in search based mutation testing. The review addressed different fitness functions used to guide the search.
Conclusion
Search based mutation testing is a field of interest, however, some issues remain unexplored. For instance, the use of meta-heuristics for the selection of effective mutation operators was identified in only one study. The results have pointed a range of possibilities for new studies to be developed, i.e., identification of equivalent mutants, experimental studies and application to different domains, such as concurrent programs."
}

@article{BALERA2019176,
title = "A systematic mapping addressing Hyper-Heuristics within Search-based Software Testing",
journal = "Information and Software Technology",
volume = "114",
pages = "176 - 189",
year = "2019",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2019.06.012",
url = "http://www.sciencedirect.com/science/article/pii/S0950584919301430",
author = "Juliana Marino Balera and Valdivino Alexandre de [Santiago Júnior]",
keywords = "Search-based Software Testing, Hyper-heuristics, Systematic Mapping, Evolutionary Algorithms, Genetic Algorithms, Meta-heuristics",
abstract = "Context
Search-based Software Testing (SBST) is a research field where testing a software product is formulated as an optimization problem. It is an active sub-area of Search-based Software Engineering (SBSE) where many studies have been published and some reviews have been carried out. The majority of studies in SBST has been adopted meta-heuristics while hyper-heuristics have a long way to go. Moreover, there is still a lack of studies to perceive the state-of-the-art of the use of hyper-heuristics within SBST.
Objective
The objective of this work is to investigate the adoption of hyper-heuristics for Software Testing highlighting the current efforts and identifying new research directions.
Method
A Systematic mapping study was carried out with 5 research questions considering papers published up to may/2019, and 4 different bases. The research questions aims to find out, among other things, what are the hyper-heuristics used in the context of Software Testing, for what problems hyper-heuristics have been applied, and what are the objective functions in the scope of Software Testing.
Results
A total of 734 studies were found via the search strings and 164 articles were related to Software Testing. However, from these, only 26 papers were actually in accordance with the scope of this research and 3 more papers were considered due to snowballing or expert’s suggestion, totalizing 29 selected papers. Few different problems and application domains where hyper-heuristics have been considered were identified.
Conclusion
Differently from other communities (Operational Research, Artificial Intelligence), SBST has little explored the benefits of hyper-heuristics which include generalization and less difficulty in parameterization. Hence, it is important to further investigate this area in order to alleviate the effort of practitioners to use such an approach in their testing activities."
}



